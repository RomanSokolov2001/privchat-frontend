{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const MessengerContext=/*#__PURE__*/createContext(undefined);export const MessengerProvider=_ref=>{let{children}=_ref;const[messages,setMessages]=useState([]);const[chats,setChats]=useState([]);const[currentChat,setCurrentChat]=useState(null);return/*#__PURE__*/_jsx(MessengerContext.Provider,{value:{messages,setMessages,chats,setChats,currentChat,setCurrentChat},children:children});};export const useMessenger=()=>{const context=useContext(MessengerContext);if(!context){throw new Error('useUser must be used within a UserProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","MessengerContext","undefined","MessengerProvider","_ref","children","messages","setMessages","chats","setChats","currentChat","setCurrentChat","Provider","value","useMessenger","context","Error"],"sources":["/home/n/Desktop/temp/app/src/context/MessengerContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { ChatInterface, Message } from '../types';\n\n\ninterface MessengerContextType {\n  messages: Message[];\n  setMessages: React.Dispatch<React.SetStateAction<Message[]>>;  \n  chats: ChatInterface[];\n  setChats: React.Dispatch<React.SetStateAction<ChatInterface[]>>;\n  currentChat: ChatInterface | null;\n  setCurrentChat: React.Dispatch<React.SetStateAction<ChatInterface | null>>;\n}\n\nconst MessengerContext = createContext<MessengerContextType | undefined>(undefined);\n\ninterface MessengerProviderProps {\n  children: ReactNode;\n}\n\nexport const MessengerProvider: React.FC<MessengerProviderProps> = ({ children }) => {\n    const [messages, setMessages] = useState<Message[]>([])\n    const [chats, setChats] = useState<ChatInterface[]>([])\n    const [currentChat, setCurrentChat] = useState<ChatInterface | null>(null);\n\n  return (\n    <MessengerContext.Provider value={{ messages, setMessages, chats, setChats, currentChat, setCurrentChat}}>\n      {children}\n    </MessengerContext.Provider >\n  );\n};\n\nexport const useMessenger = (): MessengerContextType => {\n  const context = useContext(MessengerContext);\n  if (!context) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAmB,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAa9E,KAAM,CAAAC,gBAAgB,cAAGL,aAAa,CAAmCM,SAAS,CAAC,CAMnF,MAAO,MAAM,CAAAC,iBAAmD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC5E,KAAM,CAACE,QAAQ,CAAEC,WAAW,CAAC,CAAGT,QAAQ,CAAY,EAAE,CAAC,CACvD,KAAM,CAACU,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAkB,EAAE,CAAC,CACvD,KAAM,CAACY,WAAW,CAAEC,cAAc,CAAC,CAAGb,QAAQ,CAAuB,IAAI,CAAC,CAE5E,mBACEE,IAAA,CAACC,gBAAgB,CAACW,QAAQ,EAACC,KAAK,CAAE,CAAEP,QAAQ,CAAEC,WAAW,CAAEC,KAAK,CAAEC,QAAQ,CAAEC,WAAW,CAAEC,cAAc,CAAE,CAAAN,QAAA,CACtGA,QAAQ,CACiB,CAAC,CAEjC,CAAC,CAED,MAAO,MAAM,CAAAS,YAAY,CAAGA,CAAA,GAA4B,CACtD,KAAM,CAAAC,OAAO,CAAGlB,UAAU,CAACI,gBAAgB,CAAC,CAC5C,GAAI,CAACc,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,4CAA4C,CAAC,CAC/D,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}