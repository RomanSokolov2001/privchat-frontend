{"ast":null,"code":"import axios from \"axios\";\nimport DiffieHellmanService from \"./DiffieHellmanService\";\nimport { IP } from \"../App\";\nconst BASE_URL = `http://${IP}`;\nexport const MessengerService = {\n  async getMessages(jwt) {\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages`, {\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    });\n    return response.data;\n  },\n  async sendMessage(receiver, content, secretKey, jwt) {\n    const encryptedContent = DiffieHellmanService.encrypt(content, secretKey);\n    const dto = {\n      content: encryptedContent,\n      receiver: receiver\n    };\n    const response = await axios.post(`${BASE_URL}/encrypt-chat/messages`, dto, {\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    });\n    return response.data;\n  },\n  async getMessagesFromUser(nickname, secretKey, jwt) {\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages-from`, {\n      params: {\n        nickname\n      },\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    });\n    return DiffieHellmanService.decryptMessages(response.data, secretKey);\n  },\n  async getChats(requestedPublicKey, jwt) {\n    try {\n      const response = await axios.post(`${BASE_URL}/encrypt-chat/process`, requestedPublicKey, {\n        headers: {\n          Authorization: `Bearer ${jwt}`,\n          \"Content-Type\": \"text/plain\"\n        }\n      });\n      console.log(response);\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 404) {\n          console.log(\"Request does not exist\");\n          return \"not found\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  },\n  async sendChatRequest(dto, jwt) {\n    try {\n      const response = await axios.post(`${BASE_URL}/encrypt-chat/create`, dto, {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      });\n      if (response.status == 200) {\n        console.log(\"Chat request sent successfully!\");\n      } else {\n        console.log(\"Chat request was not send\");\n      }\n      return \"success\";\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 409) {\n          console.log(\"Request already exists\");\n          return \"duplicate\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  }\n};","map":{"version":3,"names":["axios","DiffieHellmanService","IP","BASE_URL","MessengerService","getMessages","jwt","response","get","headers","Authorization","data","sendMessage","receiver","content","secretKey","encryptedContent","encrypt","dto","post","getMessagesFromUser","nickname","params","decryptMessages","getChats","requestedPublicKey","console","log","error","isAxiosError","status","sendChatRequest"],"sources":["/home/n/Desktop/temp/app/src/api/MessengerService.ts"],"sourcesContent":["import axios from \"axios\";\nimport DiffieHellmanService from \"./DiffieHellmanService\";\nimport { ChatRequestDto } from \"../types\";\nimport { IP } from \"../App\";\n\nconst BASE_URL = `http://${IP}`;\n\n\nexport const MessengerService = {\n  async getMessages(jwt: string) {\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages`, {\n      headers: { Authorization: `Bearer ${jwt}` }\n    });\n    return response.data;\n  },\n\n  async sendMessage(receiver: string, content: string, secretKey: string, jwt: string) {\n    const encryptedContent = DiffieHellmanService.encrypt(content, secretKey)\n    const dto = {content: encryptedContent, receiver: receiver}\n\n    const response = await axios.post(`${BASE_URL}/encrypt-chat/messages`, dto, {\n      headers: { Authorization: `Bearer ${jwt}` }\n    });\n\n    return response.data;\n  },\n\n  async getMessagesFromUser(nickname: string, secretKey: string, jwt: string) {\n\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages-from`, {\n      params: { nickname },\n      headers: { Authorization: `Bearer ${jwt}` }\n    });\n\n    return DiffieHellmanService.decryptMessages(response.data, secretKey)\n  },\n\n  async getChats(requestedPublicKey: string, jwt: string) {\n    try {\n      const response = await axios.post(\n        `${BASE_URL}/encrypt-chat/process`,\n        requestedPublicKey,\n        {\n          headers: {\n            Authorization: `Bearer ${jwt}`,\n            \"Content-Type\": \"text/plain\",\n          },\n        }\n      );\n      console.log(response)\n  \n      return response.data;\n  \n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 404) {\n          console.log(\"Request does not exist\");\n          return \"not found\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  },\n\n  async sendChatRequest(dto: ChatRequestDto, jwt: string) {\n\n    try {\n      const response = await axios.post(\n        `${BASE_URL}/encrypt-chat/create`,\n        dto,\n        {\n          headers: {\n            Authorization: `Bearer ${jwt}`\n          }\n        }\n      );\n      if (response.status == 200) {\n        console.log(\"Chat request sent successfully!\");\n\n      } else {\n        console.log(\"Chat request was not send\")\n      }\n      return \"success\";\n\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 409) {\n          console.log(\"Request already exists\");\n          return \"duplicate\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  }\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}