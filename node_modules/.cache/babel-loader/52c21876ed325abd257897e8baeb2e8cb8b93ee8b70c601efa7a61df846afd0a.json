{"ast":null,"code":"import*as CryptoJS from'crypto-js';const P=BigInt(23);const g=BigInt(2);export const DiffieHellmanService={generateSecret(){const randomKey=BigInt(Math.floor(Math.random()*Number(P-g)+1));return randomKey;},modularExponentiation(base,exponent,modulus){if(modulus===BigInt(1))return BigInt(0);let result=BigInt(1);base=base%modulus;while(exponent>0){if(exponent%BigInt(2)===BigInt(1)){result=result*base%modulus;}exponent=exponent>>BigInt(1);base=base*base%modulus;}return result;},generatePublicKey(secret){const pubKey=this.modularExponentiation(g,secret,P);return pubKey;},generateSharedSecret(otherPartyPublicKey,ownPrivateKey){if(!otherPartyPublicKey||!ownPrivateKey)return null;return this.modularExponentiation(BigInt(otherPartyPublicKey),BigInt(ownPrivateKey),P);},handleGenerateKeys(){var secret=this.generateSecret();const publicKey=String(this.generatePublicKey(secret));console.log(\"Private Key (Secret):\",secret.toString());console.log(\"Public Key:\",publicKey.toString());return{secret,publicKey};},encrypt(plainText,secretKey){const cipherText=CryptoJS.AES.encrypt(plainText,secretKey).toString();return cipherText;},decrypt(cipherText,secretKey){const bytes=CryptoJS.AES.decrypt(cipherText,secretKey);const plainText=bytes.toString(CryptoJS.enc.Utf8);return plainText;},decryptMessages(messages,secretKey){const decryptedMessages=messages.map(msg=>{msg.content=this.decrypt(msg.content,secretKey);return msg;});return decryptedMessages;}};export default DiffieHellmanService;","map":{"version":3,"names":["CryptoJS","P","BigInt","g","DiffieHellmanService","generateSecret","randomKey","Math","floor","random","Number","modularExponentiation","base","exponent","modulus","result","generatePublicKey","secret","pubKey","generateSharedSecret","otherPartyPublicKey","ownPrivateKey","handleGenerateKeys","publicKey","String","console","log","toString","encrypt","plainText","secretKey","cipherText","AES","decrypt","bytes","enc","Utf8","decryptMessages","messages","decryptedMessages","map","msg","content"],"sources":["/home/n/Desktop/temp/app/src/api/DiffieHellmanService.ts"],"sourcesContent":["import * as CryptoJS from 'crypto-js'\nimport { Message } from '../types';\n\n\nconst P = BigInt(23)\nconst g = BigInt(2)\n\n\n\nexport const DiffieHellmanService = {\n    generateSecret() {\n        const randomKey = BigInt(Math.floor(Math.random() * Number(P - g) + 1));\n        return randomKey;\n    },\n\n    modularExponentiation(base: bigint, exponent: bigint, modulus: bigint) {\n        if (modulus === BigInt(1)) return BigInt(0);\n        let result = BigInt(1);\n        base = base % modulus;\n        while (exponent > 0) {\n            if (exponent % BigInt(2) === BigInt(1)) {\n                result = (result * base) % modulus;\n            }\n            exponent = exponent >> BigInt(1);\n            base = (base * base) % modulus;\n        }\n        return result;\n    },\n\n    generatePublicKey(secret: bigint) {\n        const pubKey = this.modularExponentiation(g, secret, P);\n        return pubKey;\n    },\n\n    generateSharedSecret(otherPartyPublicKey: string, ownPrivateKey: string) {\n        if (!otherPartyPublicKey || !ownPrivateKey) return null;\n        return this.modularExponentiation(BigInt(otherPartyPublicKey), BigInt(ownPrivateKey), P);\n    },\n\n    handleGenerateKeys() {\n        var secret = this.generateSecret();\n        const publicKey = String(this.generatePublicKey(secret));\n        console.log(\"Private Key (Secret):\", secret.toString());\n        console.log(\"Public Key:\", publicKey.toString());\n        return { secret, publicKey };\n    },\n\n    encrypt(plainText: string, secretKey: string) {\n        const cipherText = CryptoJS.AES.encrypt(plainText, secretKey).toString()\n        return cipherText\n    },\n\n    decrypt(cipherText: string, secretKey: string) {\n        const bytes = CryptoJS.AES.decrypt(cipherText, secretKey)\n        const plainText = bytes.toString(CryptoJS.enc.Utf8)\n        return plainText\n    },\n\n    decryptMessages(messages: Message[], secretKey: string) {\n        const decryptedMessages = messages.map((msg) => {\n            msg.content = this.decrypt(msg.content, secretKey)\n            return msg\n        })\n\n        return decryptedMessages\n    }\n}\n\nexport default DiffieHellmanService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}