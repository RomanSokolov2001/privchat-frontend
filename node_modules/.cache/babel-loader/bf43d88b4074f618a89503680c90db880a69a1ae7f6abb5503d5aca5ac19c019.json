{"ast":null,"code":"var _jsxFileName = \"/home/n/Desktop/privchat10.11.2024/privchatFrontend/src/components/Chat.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport { useUser } from '../context/UserContext';\nimport { MessengerService } from '../api/MessengerService';\nimport { useMessenger } from '../context/MessengerContext';\nimport { getOpponentNickname } from '../utils/functions';\nimport Message from './Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const listRef = useRef(null);\n  const {\n    user\n  } = useUser();\n  const {\n    messages,\n    setMessages,\n    currentChat\n  } = useMessenger();\n  const [chatMessages, setChatMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const [opponentNickname, setOpponentNickname] = useState('');\n  useEffect(() => {\n    if (!currentChat) return;\n    function loadMessages() {\n      if (!currentChat) return;\n      const filteredMessages = messages.filter(msg => msg.sender == getOpponentNickname(user, currentChat) || msg.receiver == getOpponentNickname(user, currentChat));\n      setChatMessages(filteredMessages);\n    }\n    loadMessages();\n  }, [currentChat, messages]);\n  const sendMessage = async () => {\n    if (!user || !currentChat) return;\n    if (message.trim()) {\n      setMessage('');\n      await MessengerService.sendMessage(getOpponentNickname(user, currentChat), message, String(currentChat.sharedSecretKey), user.jwt);\n    }\n    const messageToSave = {\n      sender: user.nickname,\n      receiver: getOpponentNickname(user, currentChat),\n      time: String(new Date()),\n      content: message\n    };\n    setMessages(prev => [...prev, messageToSave]);\n  };\n  useEffect(() => {\n    if (listRef.current) {\n      listRef.current.scrollTop = listRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    ref: listRef,\n    className: \"overflow-auto\",\n    children: templateMsgs.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n      time: message.time,\n      text: message.content,\n      isOnLeft: 'Bob' === message.sender\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"erihEkNU2pwH5c+V0Vym513v9f0=\", false, function () {\n  return [useUser, useMessenger];\n});\n_c = Chat;\nexport default Chat;\nconst templateMsgs = [{\n  content: \"Hey, how are you?\",\n  sender: \"Alice\",\n  receiver: \"Bob\",\n  time: String(new Date())\n}, {\n  content: \"I'm good, thanks! How about you?\",\n  sender: \"Bob\",\n  receiver: \"Alice\",\n  time: String(new Date())\n}, {\n  content: \"Doing great! Are we still on for lunch tomorrow?\",\n  sender: \"Alice\",\n  receiver: \"Bob\",\n  time: String(new Date())\n}, {\n  content: \"Yes, definitely! Let's meet at 12:30?\",\n  sender: \"Bob\",\n  receiver: \"Alice\",\n  time: String(new Date())\n}, {\n  content: \"Perfect. See you then!\",\n  sender: \"Alice\",\n  receiver: \"Bob\",\n  time: String(new Date())\n}, {\n  content: \"Hey, can you send me the report by today?\",\n  sender: \"Bob\",\n  receiver: \"Alice\",\n  time: String(new Date())\n}, {\n  content: \"Sure thing! I'll send it over in an hour.\",\n  sender: \"Bob\",\n  receiver: \"Alice\",\n  time: String(new Date())\n}, {\n  content: \"Hi, did you get a chance to review the document?\",\n  sender: \"Alice\",\n  receiver: \"Bob\",\n  time: String(new Date())\n}, {\n  content: \"Yes, I did. It looks good, just a couple of minor changes needed.\",\n  sender: \"Alice\",\n  receiver: \"Bob\",\n  time: String(new Date())\n}, {\n  content: \"Got it, I'll make those changes right away.\",\n  sender: \"Bob\",\n  receiver: \"Frank\",\n  time: String(new Date())\n}];\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useRef","useState","useUser","MessengerService","useMessenger","getOpponentNickname","Message","jsxDEV","_jsxDEV","Chat","_s","listRef","user","messages","setMessages","currentChat","chatMessages","setChatMessages","message","setMessage","opponentNickname","setOpponentNickname","loadMessages","filteredMessages","filter","msg","sender","receiver","sendMessage","trim","String","sharedSecretKey","jwt","messageToSave","nickname","time","Date","content","prev","current","scrollTop","scrollHeight","ref","className","children","templateMsgs","map","index","text","isOnLeft","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/n/Desktop/privchat10.11.2024/privchatFrontend/src/components/Chat.tsx"],"sourcesContent":["import {  Key, useEffect, useRef, useState } from 'react';\nimport { useUser } from '../context/UserContext';\nimport { MessengerService } from '../api/MessengerService';\nimport { useMessenger } from '../context/MessengerContext';\nimport { getOpponentNickname } from '../utils/functions';\nimport Message from './Message';\nimport { MessageInterface } from '../types';\n\n\nconst Chat = () => {\n  const listRef = useRef<HTMLUListElement | null>(null);\n  const { user } = useUser()\n  const {messages, setMessages, currentChat} = useMessenger()\n  const [chatMessages, setChatMessages] = useState<any>([])\n  const [message, setMessage] = useState('');\n  const [opponentNickname, setOpponentNickname] = useState<string>('')\n\n\n\n  useEffect(() => {\n    if (!currentChat) return\n    function loadMessages() {\n      if (!currentChat) return\n      const filteredMessages = messages.filter(msg => \n        msg.sender == getOpponentNickname(user, currentChat) || \n        msg.receiver == getOpponentNickname(user, currentChat)\n      );\n\n      setChatMessages(filteredMessages);\n    }\n\n    loadMessages()\n  }, [currentChat, messages])\n\n  const sendMessage = async () => {\n    if (!user || !currentChat) return\n    if (message.trim()) {\n      setMessage('');\n      await MessengerService.sendMessage(getOpponentNickname(user, currentChat), message, String(currentChat.sharedSecretKey), user.jwt)\n    }\n    const messageToSave: MessageInterface = \n    {\n      sender: user.nickname,\n      receiver: getOpponentNickname(user, currentChat),\n      time: String(new Date()),\n      content: message\n    }\n    setMessages((prev)=> [...prev, messageToSave])\n\n  };\n\n  useEffect(() => {\n    if (listRef.current) {\n      listRef.current.scrollTop = listRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  return (\n    <ul ref={listRef} className=\"overflow-auto\">\n      {templateMsgs.map((message: MessageInterface, index: Key) => (\n        <Message\n          key={index}\n          time={message.time}\n          text={message.content}\n          isOnLeft={'Bob' === message.sender}\n        />\n      ))}\n    </ul>\n  );\n}\n\nexport default Chat;\n\nconst templateMsgs: MessageInterface[] = [\n  {\n    content: \"Hey, how are you?\",\n    sender: \"Alice\",\n    receiver: \"Bob\",\n    time: String(new Date()),\n  },\n  {\n    content: \"I'm good, thanks! How about you?\",\n    sender: \"Bob\",\n    receiver: \"Alice\",\n    time: String(new Date()),\n  },\n  {\n    content: \"Doing great! Are we still on for lunch tomorrow?\",\n    sender: \"Alice\",\n    receiver: \"Bob\",\n    time: String(new Date()),\n  },\n  {\n    content: \"Yes, definitely! Let's meet at 12:30?\",\n    sender: \"Bob\",\n    receiver: \"Alice\",\n    time: String(new Date()),\n  },\n  {\n    content: \"Perfect. See you then!\",\n    sender: \"Alice\",\n    receiver: \"Bob\",\n    time: String(new Date()),\n  },\n  {\n    content: \"Hey, can you send me the report by today?\",\n    sender: \"Bob\",\n    receiver: \"Alice\",\n    time: String(new Date()),\n  },\n  {\n    content: \"Sure thing! I'll send it over in an hour.\",\n    sender: \"Bob\",\n    receiver: \"Alice\",\n    time: String(new Date()),\n  },\n  {\n    content: \"Hi, did you get a chance to review the document?\",\n    sender: \"Alice\",\n    receiver: \"Bob\",\n    time: String(new Date()),\n  },\n  {\n    content: \"Yes, I did. It looks good, just a couple of minor changes needed.\",\n    sender: \"Alice\",\n    receiver: \"Bob\",\n    time: String(new Date()),\n  },\n  {\n    content: \"Got it, I'll make those changes right away.\",\n    sender: \"Bob\",\n    receiver: \"Frank\",\n    time: String(new Date()),\n  },\n];\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}