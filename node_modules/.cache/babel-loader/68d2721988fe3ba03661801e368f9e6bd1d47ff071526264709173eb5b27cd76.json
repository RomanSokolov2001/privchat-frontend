{"ast":null,"code":"import axios from\"axios\";import DiffieHellmanService from\"./DiffieHellmanService\";import{IP}from\"../types\";const BASE_URL=`http://${IP}`;export const MessengerService={async getMessages(jwt){const response=await axios.get(`${BASE_URL}/encrypt-chat/messages`,{headers:{Authorization:`Bearer ${jwt}`}});return response.data;},async sendMessage(receiver,content,secretKey,jwt){const encryptedContent=DiffieHellmanService.encrypt(content,secretKey);const dto={content:encryptedContent,receiver:receiver};const response=await axios.post(`${BASE_URL}/encrypt-chat/messages`,dto,{headers:{Authorization:`Bearer ${jwt}`}});return response.data;},async getMessagesFromUser(nickname,secretKey,jwt){const response=await axios.get(`${BASE_URL}/encrypt-chat/messages-from`,{params:{nickname},headers:{Authorization:`Bearer ${jwt}`}});return DiffieHellmanService.decryptMessages(response.data,secretKey);},async getChats(requestedPublicKey,jwt){try{const response=await axios.post(`${BASE_URL}/encrypt-chat/process`,requestedPublicKey,{headers:{Authorization:`Bearer ${jwt}`,\"Content-Type\":\"text/plain\"}});console.log(response);return response.data;}catch(error){if(axios.isAxiosError(error)&&error.response){if(error.response.status===404){console.log(\"Request does not exist\");return\"not found\";}}console.log('Error:',error);return\"error\";}},async sendChatRequest(dto,jwt){try{const response=await axios.post(`${BASE_URL}/encrypt-chat/create`,dto,{headers:{Authorization:`Bearer ${jwt}`}});if(response.status==200){console.log(\"Chat request sent successfully!\");}else{console.log(\"Chat request was not send\");}return\"success\";}catch(error){if(axios.isAxiosError(error)&&error.response){if(error.response.status===409){console.log(\"Request already exists\");return\"duplicate\";}}console.log('Error:',error);return\"error\";}}};","map":{"version":3,"names":["axios","DiffieHellmanService","IP","BASE_URL","MessengerService","getMessages","jwt","response","get","headers","Authorization","data","sendMessage","receiver","content","secretKey","encryptedContent","encrypt","dto","post","getMessagesFromUser","nickname","params","decryptMessages","getChats","requestedPublicKey","console","log","error","isAxiosError","status","sendChatRequest"],"sources":["/home/n/Desktop/temp/app/src/api/MessengerService.ts"],"sourcesContent":["import axios from \"axios\";\nimport DiffieHellmanService from \"./DiffieHellmanService\";\nimport { ChatRequestDto, IP } from \"../types\";\n\nconst BASE_URL = `http://${IP}`;\n\n\nexport const MessengerService = {\n  async getMessages(jwt: string) {\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages`, {\n      headers: { Authorization: `Bearer ${jwt}` }\n    });\n    return response.data;\n  },\n\n  async sendMessage(receiver: string, content: string, secretKey: string, jwt: string) {\n    const encryptedContent = DiffieHellmanService.encrypt(content, secretKey)\n    const dto = {content: encryptedContent, receiver: receiver}\n\n    const response = await axios.post(`${BASE_URL}/encrypt-chat/messages`, dto, {\n      headers: { Authorization: `Bearer ${jwt}` }\n    });\n\n    return response.data;\n  },\n\n  async getMessagesFromUser(nickname: string, secretKey: string, jwt: string) {\n\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages-from`, {\n      params: { nickname },\n      headers: { Authorization: `Bearer ${jwt}` }\n    });\n\n    return DiffieHellmanService.decryptMessages(response.data, secretKey)\n  },\n\n  async getChats(requestedPublicKey: string, jwt: string) {\n    try {\n      const response = await axios.post(\n        `${BASE_URL}/encrypt-chat/process`,\n        requestedPublicKey,\n        {\n          headers: {\n            Authorization: `Bearer ${jwt}`,\n            \"Content-Type\": \"text/plain\",\n          },\n        }\n      );\n      console.log(response)\n  \n      return response.data;\n  \n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 404) {\n          console.log(\"Request does not exist\");\n          return \"not found\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  },\n\n  async sendChatRequest(dto: ChatRequestDto, jwt: string) {\n\n    try {\n      const response = await axios.post(\n        `${BASE_URL}/encrypt-chat/create`,\n        dto,\n        {\n          headers: {\n            Authorization: `Bearer ${jwt}`\n          }\n        }\n      );\n      if (response.status == 200) {\n        console.log(\"Chat request sent successfully!\");\n\n      } else {\n        console.log(\"Chat request was not send\")\n      }\n      return \"success\";\n\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 409) {\n          console.log(\"Request already exists\");\n          return \"duplicate\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  }\n};\n\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,oBAAoB,KAAM,wBAAwB,CACzD,OAAyBC,EAAE,KAAQ,UAAU,CAE7C,KAAM,CAAAC,QAAQ,CAAG,UAAUD,EAAE,EAAE,CAG/B,MAAO,MAAM,CAAAE,gBAAgB,CAAG,CAC9B,KAAM,CAAAC,WAAWA,CAACC,GAAW,CAAE,CAC7B,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACQ,GAAG,CAAC,GAAGL,QAAQ,wBAAwB,CAAE,CACpEM,OAAO,CAAE,CAAEC,aAAa,CAAE,UAAUJ,GAAG,EAAG,CAC5C,CAAC,CAAC,CACF,MAAO,CAAAC,QAAQ,CAACI,IAAI,CACtB,CAAC,CAED,KAAM,CAAAC,WAAWA,CAACC,QAAgB,CAAEC,OAAe,CAAEC,SAAiB,CAAET,GAAW,CAAE,CACnF,KAAM,CAAAU,gBAAgB,CAAGf,oBAAoB,CAACgB,OAAO,CAACH,OAAO,CAAEC,SAAS,CAAC,CACzE,KAAM,CAAAG,GAAG,CAAG,CAACJ,OAAO,CAAEE,gBAAgB,CAAEH,QAAQ,CAAEA,QAAQ,CAAC,CAE3D,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACmB,IAAI,CAAC,GAAGhB,QAAQ,wBAAwB,CAAEe,GAAG,CAAE,CAC1ET,OAAO,CAAE,CAAEC,aAAa,CAAE,UAAUJ,GAAG,EAAG,CAC5C,CAAC,CAAC,CAEF,MAAO,CAAAC,QAAQ,CAACI,IAAI,CACtB,CAAC,CAED,KAAM,CAAAS,mBAAmBA,CAACC,QAAgB,CAAEN,SAAiB,CAAET,GAAW,CAAE,CAE1E,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACQ,GAAG,CAAC,GAAGL,QAAQ,6BAA6B,CAAE,CACzEmB,MAAM,CAAE,CAAED,QAAS,CAAC,CACpBZ,OAAO,CAAE,CAAEC,aAAa,CAAE,UAAUJ,GAAG,EAAG,CAC5C,CAAC,CAAC,CAEF,MAAO,CAAAL,oBAAoB,CAACsB,eAAe,CAAChB,QAAQ,CAACI,IAAI,CAAEI,SAAS,CAAC,CACvE,CAAC,CAED,KAAM,CAAAS,QAAQA,CAACC,kBAA0B,CAAEnB,GAAW,CAAE,CACtD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACmB,IAAI,CAC/B,GAAGhB,QAAQ,uBAAuB,CAClCsB,kBAAkB,CAClB,CACEhB,OAAO,CAAE,CACPC,aAAa,CAAE,UAAUJ,GAAG,EAAE,CAC9B,cAAc,CAAE,YAClB,CACF,CACF,CAAC,CACDoB,OAAO,CAACC,GAAG,CAACpB,QAAQ,CAAC,CAErB,MAAO,CAAAA,QAAQ,CAACI,IAAI,CAEtB,CAAE,MAAOiB,KAAK,CAAE,CACd,GAAI5B,KAAK,CAAC6B,YAAY,CAACD,KAAK,CAAC,EAAIA,KAAK,CAACrB,QAAQ,CAAE,CAC/C,GAAIqB,KAAK,CAACrB,QAAQ,CAACuB,MAAM,GAAK,GAAG,CAAE,CACjCJ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC,CACrC,MAAO,WAAW,CACpB,CACF,CACAD,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAEC,KAAK,CAAC,CAC5B,MAAO,OAAO,CAChB,CACF,CAAC,CAED,KAAM,CAAAG,eAAeA,CAACb,GAAmB,CAAEZ,GAAW,CAAE,CAEtD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACmB,IAAI,CAC/B,GAAGhB,QAAQ,sBAAsB,CACjCe,GAAG,CACH,CACET,OAAO,CAAE,CACPC,aAAa,CAAE,UAAUJ,GAAG,EAC9B,CACF,CACF,CAAC,CACD,GAAIC,QAAQ,CAACuB,MAAM,EAAI,GAAG,CAAE,CAC1BJ,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAEhD,CAAC,IAAM,CACLD,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CAC1C,CACA,MAAO,SAAS,CAElB,CAAE,MAAOC,KAAK,CAAE,CACd,GAAI5B,KAAK,CAAC6B,YAAY,CAACD,KAAK,CAAC,EAAIA,KAAK,CAACrB,QAAQ,CAAE,CAC/C,GAAIqB,KAAK,CAACrB,QAAQ,CAACuB,MAAM,GAAK,GAAG,CAAE,CACjCJ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC,CACrC,MAAO,WAAW,CACpB,CACF,CACAD,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAEC,KAAK,CAAC,CAC5B,MAAO,OAAO,CAChB,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}