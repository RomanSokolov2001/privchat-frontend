{"ast":null,"code":"export function getOpponentNickname(user, chat) {\n  if ((user === null || user === void 0 ? void 0 : user.nickname) == chat.requesterNickname) return chat.requestedNickname;else {\n    return chat.requesterNickname;\n  }\n}\nexport function getOpponentPublicKey(user, chat) {\n  if ((user === null || user === void 0 ? void 0 : user.publicKey) == chat.requesterPublicKey) return chat.requestedPublicKey;else {\n    return chat.requesterPublicKey;\n  }\n}\nexport function timeAgo(date) {\n  const dateObject = new Date(date);\n  const seconds = Math.floor((new Date().getTime() - dateObject.getTime()) / 1000);\n  const interval = Math.floor(seconds / 31536000);\n  if (interval > 1) {\n    return interval + \" years ago\";\n  }\n  if (interval === 1) {\n    return interval + \" year ago\";\n  }\n  const months = Math.floor(seconds / 2628000);\n  if (months > 1) {\n    return months + \" months ago\";\n  }\n  if (months === 1) {\n    return months + \" month ago\";\n  }\n  const days = Math.floor(seconds / 86400);\n  if (days > 1) {\n    return days + \" days ago\";\n  }\n  if (days === 1) {\n    return days + \" day ago\";\n  }\n  const hours = Math.floor(seconds / 3600);\n  if (hours > 1) {\n    return hours + \" hours ago\";\n  }\n  if (hours === 1) {\n    return hours + \" hour ago\";\n  }\n  const minutes = Math.floor(seconds / 60);\n  if (minutes > 1) {\n    return minutes + \" minutes ago\";\n  }\n  if (minutes === 1) {\n    return minutes + \" minute ago\";\n  }\n  return \"just now\";\n}\nfunction generateRandomId(length = 8) {\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let randomId = '';\n  for (let i = 0; i < length; i++) {\n    randomId += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return randomId;\n}\nconsole.log(generateRandomId());","map":{"version":3,"names":["getOpponentNickname","user","chat","nickname","requesterNickname","requestedNickname","getOpponentPublicKey","publicKey","requesterPublicKey","requestedPublicKey","timeAgo","date","dateObject","Date","seconds","Math","floor","getTime","interval","months","days","hours","minutes","generateRandomId","length","characters","randomId","i","charAt","random","console","log"],"sources":["/home/n/Desktop/privchat10.11.2024/privchatFrontend/src/utils/functions.ts"],"sourcesContent":["import { ChatInterface } from \"../types\"\n\nexport function getOpponentNickname(user: any, chat: ChatInterface) {\n  if (user?.nickname == chat.requesterNickname) return chat.requestedNickname\n  else { return chat.requesterNickname }\n}\n\nexport function getOpponentPublicKey(user: any, chat: ChatInterface) {\n  if (user?.publicKey == chat.requesterPublicKey) return chat.requestedPublicKey\n  else { return chat.requesterPublicKey }\n}\n\nexport function timeAgo(date: string): string {\n  const dateObject = new Date(date);\n  const seconds = Math.floor((new Date().getTime() - dateObject.getTime()) / 1000);\n  const interval = Math.floor(seconds / 31536000);\n\n  if (interval > 1) {\n    return interval + \" years ago\";\n  }\n  if (interval === 1) {\n    return interval + \" year ago\";\n  }\n\n  const months = Math.floor(seconds / 2628000);\n  if (months > 1) {\n    return months + \" months ago\";\n  }\n  if (months === 1) {\n    return months + \" month ago\";\n  }\n\n  const days = Math.floor(seconds / 86400);\n  if (days > 1) {\n    return days + \" days ago\";\n  }\n  if (days === 1) {\n    return days + \" day ago\";\n  }\n\n  const hours = Math.floor(seconds / 3600);\n  if (hours > 1) {\n    return hours + \" hours ago\";\n  }\n  if (hours === 1) {\n    return hours + \" hour ago\";\n  }\n\n  const minutes = Math.floor(seconds / 60);\n  if (minutes > 1) {\n    return minutes + \" minutes ago\";\n  }\n  if (minutes === 1) {\n    return minutes + \" minute ago\";\n  }\n\n  return \"just now\";\n}\n\nfunction generateRandomId(length = 8) {\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let randomId = '';\n  for (let i = 0; i < length; i++) {\n    randomId += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return randomId;\n}\n\nconsole.log(generateRandomId());"],"mappings":"AAEA,OAAO,SAASA,mBAAmBA,CAACC,IAAS,EAAEC,IAAmB,EAAE;EAClE,IAAI,CAAAD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,QAAQ,KAAID,IAAI,CAACE,iBAAiB,EAAE,OAAOF,IAAI,CAACG,iBAAiB,MACtE;IAAE,OAAOH,IAAI,CAACE,iBAAiB;EAAC;AACvC;AAEA,OAAO,SAASE,oBAAoBA,CAACL,IAAS,EAAEC,IAAmB,EAAE;EACnE,IAAI,CAAAD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEM,SAAS,KAAIL,IAAI,CAACM,kBAAkB,EAAE,OAAON,IAAI,CAACO,kBAAkB,MACzE;IAAE,OAAOP,IAAI,CAACM,kBAAkB;EAAC;AACxC;AAEA,OAAO,SAASE,OAAOA,CAACC,IAAY,EAAU;EAC5C,MAAMC,UAAU,GAAG,IAAIC,IAAI,CAACF,IAAI,CAAC;EACjC,MAAMG,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAC,CAAC,IAAIH,IAAI,CAAC,CAAC,CAACI,OAAO,CAAC,CAAC,GAAGL,UAAU,CAACK,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC;EAChF,MAAMC,QAAQ,GAAGH,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,QAAQ,CAAC;EAE/C,IAAII,QAAQ,GAAG,CAAC,EAAE;IAChB,OAAOA,QAAQ,GAAG,YAAY;EAChC;EACA,IAAIA,QAAQ,KAAK,CAAC,EAAE;IAClB,OAAOA,QAAQ,GAAG,WAAW;EAC/B;EAEA,MAAMC,MAAM,GAAGJ,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,OAAO,CAAC;EAC5C,IAAIK,MAAM,GAAG,CAAC,EAAE;IACd,OAAOA,MAAM,GAAG,aAAa;EAC/B;EACA,IAAIA,MAAM,KAAK,CAAC,EAAE;IAChB,OAAOA,MAAM,GAAG,YAAY;EAC9B;EAEA,MAAMC,IAAI,GAAGL,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,KAAK,CAAC;EACxC,IAAIM,IAAI,GAAG,CAAC,EAAE;IACZ,OAAOA,IAAI,GAAG,WAAW;EAC3B;EACA,IAAIA,IAAI,KAAK,CAAC,EAAE;IACd,OAAOA,IAAI,GAAG,UAAU;EAC1B;EAEA,MAAMC,KAAK,GAAGN,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,IAAI,CAAC;EACxC,IAAIO,KAAK,GAAG,CAAC,EAAE;IACb,OAAOA,KAAK,GAAG,YAAY;EAC7B;EACA,IAAIA,KAAK,KAAK,CAAC,EAAE;IACf,OAAOA,KAAK,GAAG,WAAW;EAC5B;EAEA,MAAMC,OAAO,GAAGP,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,EAAE,CAAC;EACxC,IAAIQ,OAAO,GAAG,CAAC,EAAE;IACf,OAAOA,OAAO,GAAG,cAAc;EACjC;EACA,IAAIA,OAAO,KAAK,CAAC,EAAE;IACjB,OAAOA,OAAO,GAAG,aAAa;EAChC;EAEA,OAAO,UAAU;AACnB;AAEA,SAASC,gBAAgBA,CAACC,MAAM,GAAG,CAAC,EAAE;EACpC,MAAMC,UAAU,GAAG,gEAAgE;EACnF,IAAIC,QAAQ,GAAG,EAAE;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC/BD,QAAQ,IAAID,UAAU,CAACG,MAAM,CAACb,IAAI,CAACC,KAAK,CAACD,IAAI,CAACc,MAAM,CAAC,CAAC,GAAGJ,UAAU,CAACD,MAAM,CAAC,CAAC;EAC9E;EACA,OAAOE,QAAQ;AACjB;AAEAI,OAAO,CAACC,GAAG,CAACR,gBAAgB,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}