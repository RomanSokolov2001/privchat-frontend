{"ast":null,"code":"import axios from \"axios\";\nimport DiffieHellmanService from \"./DiffieHellmanService\";\nimport { IP } from \"../types\";\nimport { generateRandomId } from \"../utils/functions\";\nimport FileService from \"./FileService\";\nconst BASE_URL = `http://${IP}`;\nexport const MessengerService = {\n  async getMessages(jwt) {\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages`, {\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    });\n    return response.data;\n  },\n  async sendMessage(receiver, content, secretKey, jwt) {\n    const encryptedContent = DiffieHellmanService.encrypt(content, secretKey);\n    const dto = {\n      content: encryptedContent,\n      receiver: receiver\n    };\n    const response = await axios.post(`${BASE_URL}/encrypt-chat/messages`, dto, {\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    });\n    return response.data;\n  },\n  async getMessagesFromUser(nickname, secretKey, jwt) {\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages-from`, {\n      params: {\n        nickname\n      },\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    });\n    return DiffieHellmanService.decryptMessages(response.data, secretKey);\n  },\n  async getChats(requestedPublicKey, jwt) {\n    try {\n      const response = await axios.post(`${BASE_URL}/encrypt-chat/process`, requestedPublicKey, {\n        headers: {\n          Authorization: `Bearer ${jwt}`,\n          \"Content-Type\": \"text/plain\"\n        }\n      });\n      console.log(response);\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 404) {\n          console.log(\"Request does not exist\");\n          return \"not found\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  },\n  async sendChatRequest(dto, jwt) {\n    try {\n      const response = await axios.post(`${BASE_URL}/encrypt-chat/create`, dto, {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      });\n      if (response.status == 200) {\n        console.log(\"Chat request sent successfully!\");\n      } else {\n        console.log(\"Chat request was not send\");\n      }\n      return \"success\";\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 409) {\n          console.log(\"Request already exists\");\n          return \"duplicate\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  },\n  // Upload Encrypted File\n  async uploadEncryptedFile(file, secretKey, jwt, receiver) {\n    try {\n      // Encrypt the file content\n      const {\n        content,\n        fileType\n      } = await FileService.fileToString(file);\n      const encryptedContent = DiffieHellmanService.encrypt(content, secretKey);\n      const encryptedFileTxt = FileService.stringToTextFile(encryptedContent, file.name);\n      const formData = new FormData();\n      formData.append(\"file\", encryptedFileTxt);\n      formData.append(\"receiver\", receiver);\n      formData.append(\"fileType\", fi);\n      const response = await axios.post(`${BASE_URL}/encrypt-files/files`, formData, {\n        headers: {\n          Authorization: `Bearer ${jwt}`,\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      console.log(\"Encrypted file uploaded successfully!\");\n      return response.data;\n    } catch (error) {\n      console.error(\"Error uploading encrypted file:\", error);\n      throw error;\n    }\n  },\n  // Retrieve Encrypted File\n  async downloadEncryptedFile(filename, secretKey, jwt) {\n    try {\n      const response = await axios.get(`${BASE_URL}/encrypt-files/files?filename=${filename}`, {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        },\n        responseType: \"blob\"\n      });\n      const encryptedBlob = new Blob([response.data]);\n      const encryptedFile = new File([encryptedBlob], filename);\n\n      // Decrypt the file\n      const decryptedFile = await DiffieHellmanService.decryptFile(encryptedFile, secretKey);\n      console.log(\"Encrypted file downloaded and decrypted successfully!\");\n      saveFileToClient(decryptedFile);\n    } catch (error) {\n      console.error(\"Error downloading or decrypting file:\", error);\n      throw error;\n    }\n  },\n  async uploadEncryptedMedia(images, secretKey, jwt, receiver) {\n    const randomId = generateRandomId();\n    images.forEach(async img => {\n      try {\n        const {\n          content,\n          fileType\n        } = await FileService.fileToString(img);\n        const encryptedContent = DiffieHellmanService.encrypt(content, secretKey);\n        const encryptedFileTxt = FileService.stringToTextFile(encryptedContent, img.name);\n        const formData = new FormData();\n        formData.append(\"file\", encryptedFileTxt);\n        formData.append(\"filename\", img.name);\n        formData.append(\"receiver\", receiver);\n        formData.append(\"randomId\", randomId);\n        formData.append(\"fileType\", fileType);\n        await axios.post(`${BASE_URL}/encrypt-files/media`, formData, {\n          headers: {\n            Authorization: `Bearer ${jwt}`,\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n\n        // console.log(\"Encrypted file uploaded successfully!\");\n      } catch (error) {\n        console.error(\"Error uploading encrypted file:\", error);\n        throw error;\n      }\n    });\n  },\n  // Retrieve Encrypted File\n  async downloadEncryptedMedia(filename, secretKey, jwt, fileType) {\n    try {\n      const response = await axios.get(`${BASE_URL}/encrypt-files/files?filename=${filename}`, {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        },\n        responseType: \"blob\"\n      });\n      const blob = new Blob([response.data]);\n      const encryptedFileTxt = new File([blob], filename, {\n        type: 'text/plain'\n      });\n      const encryptedString = await FileService.textFileToString(encryptedFileTxt);\n      const decryptedString = DiffieHellmanService.decrypt(encryptedString, String(secretKey));\n      const decryptedFile = FileService.stringToFile(decryptedString, filename, fileType);\n      console.log(\"Encrypted file downloaded and decrypted successfully!\");\n      const fileUrl = URL.createObjectURL(decryptedFile);\n      console.log(\"Generated URL for decrypted file:\", fileUrl);\n      return decryptedFile;\n    } catch (error) {\n      console.error(\"Error downloading or decrypting file:\", error);\n      throw error;\n    }\n  }\n};\nfunction saveFileToClient(file) {\n  const url = URL.createObjectURL(file);\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = file.name;\n  document.body.appendChild(link);\n  link.click();\n  URL.revokeObjectURL(url);\n  document.body.removeChild(link);\n}","map":{"version":3,"names":["axios","DiffieHellmanService","IP","generateRandomId","FileService","BASE_URL","MessengerService","getMessages","jwt","response","get","headers","Authorization","data","sendMessage","receiver","content","secretKey","encryptedContent","encrypt","dto","post","getMessagesFromUser","nickname","params","decryptMessages","getChats","requestedPublicKey","console","log","error","isAxiosError","status","sendChatRequest","uploadEncryptedFile","file","fileType","fileToString","encryptedFileTxt","stringToTextFile","name","formData","FormData","append","fi","downloadEncryptedFile","filename","responseType","encryptedBlob","Blob","encryptedFile","File","decryptedFile","decryptFile","saveFileToClient","uploadEncryptedMedia","images","randomId","forEach","img","downloadEncryptedMedia","blob","type","encryptedString","textFileToString","decryptedString","decrypt","String","stringToFile","fileUrl","URL","createObjectURL","url","link","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild"],"sources":["/home/n/Desktop/privchat10.11.2024/privchatFrontend/src/api/MessengerService.ts"],"sourcesContent":["import axios from \"axios\";\nimport DiffieHellmanService from \"./DiffieHellmanService\";\nimport { ChatRequestDto, FileEntry, IP, MediaEntry } from \"../types\";\nimport { generateRandomId } from \"../utils/functions\";\nimport FileService from \"./FileService\";\n\nconst BASE_URL = `http://${IP}`;\n\n\nexport const MessengerService = {\n  async getMessages(jwt: string) {\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages`, {\n      headers: { Authorization: `Bearer ${jwt}` }\n    });\n    return response.data;\n  },\n\n  async sendMessage(receiver: string, content: string, secretKey: string, jwt: string) {\n    const encryptedContent = DiffieHellmanService.encrypt(content, secretKey)\n    const dto = { content: encryptedContent, receiver: receiver }\n\n    const response = await axios.post(`${BASE_URL}/encrypt-chat/messages`, dto, {\n      headers: { Authorization: `Bearer ${jwt}` }\n    });\n\n    return response.data;\n  },\n\n  async getMessagesFromUser(nickname: string, secretKey: string, jwt: string) {\n\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages-from`, {\n      params: { nickname },\n      headers: { Authorization: `Bearer ${jwt}` }\n    });\n\n    return DiffieHellmanService.decryptMessages(response.data, secretKey)\n  },\n\n  async getChats(requestedPublicKey: string, jwt: string) {\n    try {\n      const response = await axios.post(\n        `${BASE_URL}/encrypt-chat/process`,\n        requestedPublicKey,\n        {\n          headers: {\n            Authorization: `Bearer ${jwt}`,\n            \"Content-Type\": \"text/plain\",\n          },\n        }\n      );\n      console.log(response)\n\n      return response.data;\n\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 404) {\n          console.log(\"Request does not exist\");\n          return \"not found\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  },\n\n  async sendChatRequest(dto: ChatRequestDto, jwt: string) {\n\n    try {\n      const response = await axios.post(\n        `${BASE_URL}/encrypt-chat/create`,\n        dto,\n        {\n          headers: {\n            Authorization: `Bearer ${jwt}`\n          }\n        }\n      );\n      if (response.status == 200) {\n        console.log(\"Chat request sent successfully!\");\n\n      } else {\n        console.log(\"Chat request was not send\")\n      }\n      return \"success\";\n\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 409) {\n          console.log(\"Request already exists\");\n          return \"duplicate\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  },\n\n  // Upload Encrypted File\n  async uploadEncryptedFile(file: File, secretKey: string, jwt: string, receiver: string) {\n    try {\n      // Encrypt the file content\n      const {content, fileType} = await FileService.fileToString(file);\n      const encryptedContent = DiffieHellmanService.encrypt(content, secretKey)\n      const encryptedFileTxt = FileService.stringToTextFile(encryptedContent, file.name)   \n\n      const formData = new FormData();\n      formData.append(\"file\", encryptedFileTxt);\n      formData.append(\"receiver\", receiver);\n      formData.append(\"fileType\", fi)\n\n      const response = await axios.post(`${BASE_URL}/encrypt-files/files`, formData, {\n        headers: {\n          Authorization: `Bearer ${jwt}`,\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n\n      console.log(\"Encrypted file uploaded successfully!\");\n      return response.data;\n    } catch (error) {\n      console.error(\"Error uploading encrypted file:\", error);\n      throw error;\n    }\n  },\n\n  // Retrieve Encrypted File\n  async downloadEncryptedFile(filename: string, secretKey: string, jwt: string) {\n    try {\n      const response = await axios.get(`${BASE_URL}/encrypt-files/files?filename=${filename}`, {\n        headers: {\n          Authorization: `Bearer ${jwt}`,\n        },\n        responseType: \"blob\",\n      });\n      const encryptedBlob = new Blob([response.data]);\n      const encryptedFile = new File([encryptedBlob], filename);\n\n      // Decrypt the file\n      const decryptedFile = await DiffieHellmanService.decryptFile(encryptedFile, secretKey);\n\n      console.log(\"Encrypted file downloaded and decrypted successfully!\");\n      saveFileToClient(decryptedFile);\n    } catch (error) {\n      console.error(\"Error downloading or decrypting file:\", error);\n      throw error;\n    }\n  },\n\n  async uploadEncryptedMedia(images: File[], secretKey: string, jwt: string, receiver: string) {\n    const randomId = generateRandomId()\n    images.forEach(async img => {\n      try {\n\n        const {content, fileType} = await FileService.fileToString(img);\n        const encryptedContent = DiffieHellmanService.encrypt(content, secretKey)\n        const encryptedFileTxt = FileService.stringToTextFile(encryptedContent, img.name)        \n\n        const formData = new FormData();\n        formData.append(\"file\", encryptedFileTxt);\n        formData.append(\"filename\", img.name)\n        formData.append(\"receiver\", receiver);\n        formData.append(\"randomId\", randomId);\n        formData.append(\"fileType\", fileType)\n\n        await axios.post(`${BASE_URL}/encrypt-files/media`, formData, {\n          headers: {\n            Authorization: `Bearer ${jwt}`,\n            \"Content-Type\": \"multipart/form-data\",\n          },\n        });\n\n        // console.log(\"Encrypted file uploaded successfully!\");\n      } catch (error) {\n        console.error(\"Error uploading encrypted file:\", error);\n        throw error;\n      }\n    })\n  },\n    // Retrieve Encrypted File\n    async downloadEncryptedMedia(filename: string, secretKey: string, jwt: string, fileType: string):Promise<File> {\n      try {\n        const response = await axios.get(`${BASE_URL}/encrypt-files/files?filename=${filename}`, {\n          headers: {\n            Authorization: `Bearer ${jwt}`,\n          },\n          responseType: \"blob\",\n        });\n        const blob = new Blob([response.data]);\n        const encryptedFileTxt = new File([blob], filename, {type:  'text/plain'});\n        const encryptedString = await FileService.textFileToString(encryptedFileTxt)\n        const decryptedString = DiffieHellmanService.decrypt(encryptedString, String(secretKey))\n        const decryptedFile = FileService.stringToFile(decryptedString, filename, fileType)\n  \n        console.log(\"Encrypted file downloaded and decrypted successfully!\");\n        const fileUrl = URL.createObjectURL(decryptedFile);\n        console.log(\"Generated URL for decrypted file:\", fileUrl);\n        return decryptedFile\n\n      } catch (error) {\n        console.error(\"Error downloading or decrypting file:\", error);\n        throw error;\n      }\n    },\n}\n\nfunction saveFileToClient(file: File): void {\n  const url = URL.createObjectURL(file);\n\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = file.name;\n\n  document.body.appendChild(link);\n\n  link.click();\n\n  URL.revokeObjectURL(url);\n  document.body.removeChild(link);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}