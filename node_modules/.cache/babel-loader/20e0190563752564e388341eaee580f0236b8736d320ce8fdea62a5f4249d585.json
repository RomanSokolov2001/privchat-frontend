{"ast":null,"code":"import axios from \"axios\";\nimport JSZip from 'jszip';\nimport DiffieHellmanService from \"./DiffieHellmanService\";\nimport { IP } from \"../types\";\nconst BASE_URL = `http://${IP}`;\nexport const MessengerService = {\n  async getMessages(jwt) {\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages`, {\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    });\n    return response.data;\n  },\n  async sendMessage(receiver, content, secretKey, jwt) {\n    const encryptedContent = DiffieHellmanService.encrypt(content, secretKey);\n    const dto = {\n      content: encryptedContent,\n      receiver: receiver\n    };\n    const response = await axios.post(`${BASE_URL}/encrypt-chat/messages`, dto, {\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    });\n    return response.data;\n  },\n  async getMessagesFromUser(nickname, secretKey, jwt) {\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages-from`, {\n      params: {\n        nickname\n      },\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    });\n    return DiffieHellmanService.decryptMessages(response.data, secretKey);\n  },\n  async getChats(requestedPublicKey, jwt) {\n    try {\n      const response = await axios.post(`${BASE_URL}/encrypt-chat/process`, requestedPublicKey, {\n        headers: {\n          Authorization: `Bearer ${jwt}`,\n          \"Content-Type\": \"text/plain\"\n        }\n      });\n      console.log(response);\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 404) {\n          console.log(\"Request does not exist\");\n          return \"not found\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  },\n  async sendChatRequest(dto, jwt) {\n    try {\n      const response = await axios.post(`${BASE_URL}/encrypt-chat/create`, dto, {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      });\n      if (response.status == 200) {\n        console.log(\"Chat request sent successfully!\");\n      } else {\n        console.log(\"Chat request was not send\");\n      }\n      return \"success\";\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 409) {\n          console.log(\"Request already exists\");\n          return \"duplicate\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  },\n  // Upload Encrypted File\n  async uploadEncryptedFile(file, secretKey, jwt, receiver) {\n    try {\n      // Encrypt the file content\n      const encryptedFile = await DiffieHellmanService.encryptFile(file, secretKey);\n      console.log(secretKey);\n      const formData = new FormData();\n      formData.append(\"file\", encryptedFile);\n      formData.append(\"receiver\", receiver); // Include receiver in the request\n\n      const response = await axios.post(`${BASE_URL}/encrypt-files/files`, formData, {\n        headers: {\n          Authorization: `Bearer ${jwt}`,\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      console.log(\"Encrypted file uploaded successfully!\");\n      return response.data;\n    } catch (error) {\n      console.error(\"Error uploading encrypted file:\", error);\n      throw error;\n    }\n  },\n  // Retrieve Encrypted File\n  async downloadEncryptedFile(filename, secretKey, jwt) {\n    try {\n      const response = await axios.get(`${BASE_URL}/encrypt-files/files?filename=${filename}`, {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        },\n        responseType: \"blob\"\n      });\n      const encryptedBlob = new Blob([response.data]);\n      const encryptedFile = new File([encryptedBlob], filename);\n\n      // Decrypt the file\n      const decryptedFile = await DiffieHellmanService.decryptFile(encryptedFile, secretKey);\n      console.log(\"Encrypted file downloaded and decrypted successfully!\");\n      saveFileToClient(decryptedFile);\n    } catch (error) {\n      console.error(\"Error downloading or decrypting file:\", error);\n      throw error;\n    }\n  },\n  async uploadEncryptedMedia(images, secretKey, jwt, receiver) {\n    try {\n      const zip = new JSZip();\n      images.forEach(image => {\n        zip.file(image.name, image);\n      });\n      const zipBlob = await zip.generateAsync({\n        type: \"blob\"\n      });\n      const zipFile = new File([zipBlob], \"media.zip\");\n      const encryptedZipBlob = await DiffieHellmanService.encryptFile(zipFile, secretKey);\n      const formData = new FormData();\n      formData.append(\"file\", zipFile);\n      formData.append(\"receiver\", receiver);\n      const response = await axios.post(`${BASE_URL}/encrypt-files/media`, formData, {\n        headers: {\n          Authorization: `Bearer ${jwt}`,\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      console.log(\"Encrypted ZIP file uploaded successfully!\");\n      return response.data;\n    } catch (error) {\n      console.error(\"Error uploading encrypted ZIP file:\", error);\n      throw error;\n    }\n  },\n  // Retrieve Encrypted File\n  async downloadEncryptedMedia(filename, secretKey, jwt) {\n    try {\n      const response = await axios.get(`${BASE_URL}/encrypt-files/media?filename=${filename}`, {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        },\n        responseType: \"blob\"\n      });\n      const encryptedBlob = new Blob([response.data]);\n      const encryptedFile = new File([encryptedBlob], filename);\n\n      // const decryptedZipBlob = await DiffieHellmanService.decryptFile(encryptedFile, String(secretKey));\n\n      const zip = new JSZip();\n      const unzippedFiles = await zip.loadAsync(encryptedFile);\n      const decryptedImages = [];\n      for (const fileName of Object.keys(unzippedFiles.files)) {\n        const fileData = await unzippedFiles.files[fileName].async('blob');\n        const file = new File([fileData], fileName, {\n          type: 'image/*'\n        });\n        decryptedImages.push(file);\n      }\n      console.log(\"Encrypted media downloaded, decrypted, and extracted successfully!\");\n      return decryptedImages; // Return the array of decrypted images\n    } catch (error) {\n      console.error(\"Error downloading, decrypting, or processing media:\", error);\n      throw error;\n    }\n  }\n};\nfunction saveFileToClient(file) {\n  const url = URL.createObjectURL(file);\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = file.name;\n  document.body.appendChild(link);\n  link.click();\n  URL.revokeObjectURL(url);\n  document.body.removeChild(link);\n}","map":{"version":3,"names":["axios","JSZip","DiffieHellmanService","IP","BASE_URL","MessengerService","getMessages","jwt","response","get","headers","Authorization","data","sendMessage","receiver","content","secretKey","encryptedContent","encrypt","dto","post","getMessagesFromUser","nickname","params","decryptMessages","getChats","requestedPublicKey","console","log","error","isAxiosError","status","sendChatRequest","uploadEncryptedFile","file","encryptedFile","encryptFile","formData","FormData","append","downloadEncryptedFile","filename","responseType","encryptedBlob","Blob","File","decryptedFile","decryptFile","saveFileToClient","uploadEncryptedMedia","images","zip","forEach","image","name","zipBlob","generateAsync","type","zipFile","encryptedZipBlob","downloadEncryptedMedia","unzippedFiles","loadAsync","decryptedImages","fileName","Object","keys","files","fileData","async","push","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild"],"sources":["/home/n/Desktop/privchat10.11.2024/privchatFrontend/src/api/MessengerService.ts"],"sourcesContent":["import axios from \"axios\";\nimport JSZip from 'jszip';\nimport DiffieHellmanService from \"./DiffieHellmanService\";\nimport { ChatRequestDto, FileEntry, IP, MediaEntry } from \"../types\";\n\nconst BASE_URL = `http://${IP}`;\n\n\nexport const MessengerService = {\n  async getMessages(jwt: string) {\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages`, {\n      headers: { Authorization: `Bearer ${jwt}` }\n    });\n    return response.data;\n  },\n\n  async sendMessage(receiver: string, content: string, secretKey: string, jwt: string) {\n    const encryptedContent = DiffieHellmanService.encrypt(content, secretKey)\n    const dto = { content: encryptedContent, receiver: receiver }\n\n    const response = await axios.post(`${BASE_URL}/encrypt-chat/messages`, dto, {\n      headers: { Authorization: `Bearer ${jwt}` }\n    });\n\n    return response.data;\n  },\n\n  async getMessagesFromUser(nickname: string, secretKey: string, jwt: string) {\n\n    const response = await axios.get(`${BASE_URL}/encrypt-chat/messages-from`, {\n      params: { nickname },\n      headers: { Authorization: `Bearer ${jwt}` }\n    });\n\n    return DiffieHellmanService.decryptMessages(response.data, secretKey)\n  },\n\n  async getChats(requestedPublicKey: string, jwt: string) {\n    try {\n      const response = await axios.post(\n        `${BASE_URL}/encrypt-chat/process`,\n        requestedPublicKey,\n        {\n          headers: {\n            Authorization: `Bearer ${jwt}`,\n            \"Content-Type\": \"text/plain\",\n          },\n        }\n      );\n      console.log(response)\n\n      return response.data;\n\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 404) {\n          console.log(\"Request does not exist\");\n          return \"not found\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  },\n\n  async sendChatRequest(dto: ChatRequestDto, jwt: string) {\n\n    try {\n      const response = await axios.post(\n        `${BASE_URL}/encrypt-chat/create`,\n        dto,\n        {\n          headers: {\n            Authorization: `Bearer ${jwt}`\n          }\n        }\n      );\n      if (response.status == 200) {\n        console.log(\"Chat request sent successfully!\");\n\n      } else {\n        console.log(\"Chat request was not send\")\n      }\n      return \"success\";\n\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        if (error.response.status === 409) {\n          console.log(\"Request already exists\");\n          return \"duplicate\";\n        }\n      }\n      console.log('Error:', error);\n      return \"error\";\n    }\n  },\n\n  // Upload Encrypted File\n  async uploadEncryptedFile(file: File, secretKey: string, jwt: string, receiver: string) {\n    try {\n      // Encrypt the file content\n      const encryptedFile = await DiffieHellmanService.encryptFile(file, secretKey);\n      console.log(secretKey)\n\n      const formData = new FormData();\n      formData.append(\"file\", encryptedFile);\n      formData.append(\"receiver\", receiver); // Include receiver in the request\n\n      const response = await axios.post(`${BASE_URL}/encrypt-files/files`, formData, {\n        headers: {\n          Authorization: `Bearer ${jwt}`,\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n\n      console.log(\"Encrypted file uploaded successfully!\");\n      return response.data;\n    } catch (error) {\n      console.error(\"Error uploading encrypted file:\", error);\n      throw error;\n    }\n  },\n\n  // Retrieve Encrypted File\n  async downloadEncryptedFile(filename: string, secretKey: string, jwt: string) {\n    try {\n      const response = await axios.get(`${BASE_URL}/encrypt-files/files?filename=${filename}`, {\n        headers: {\n          Authorization: `Bearer ${jwt}`,\n        },\n        responseType: \"blob\",\n      });\n      const encryptedBlob = new Blob([response.data]);\n      const encryptedFile = new File([encryptedBlob], filename);\n\n      // Decrypt the file\n      const decryptedFile = await DiffieHellmanService.decryptFile(encryptedFile, secretKey);\n\n      console.log(\"Encrypted file downloaded and decrypted successfully!\");\n      saveFileToClient(decryptedFile);\n    } catch (error) {\n      console.error(\"Error downloading or decrypting file:\", error);\n      throw error;\n    }\n  },\n\n  async uploadEncryptedMedia(images: File[], secretKey: string, jwt: string, receiver: string) {\n    try {\n      const zip = new JSZip();\n  \n      images.forEach((image) => {\n        zip.file(image.name, image);\n      });\n  \n      const zipBlob = await zip.generateAsync({ type: \"blob\" });\n  \n      const zipFile = new File([zipBlob], \"media.zip\");\n      const encryptedZipBlob = await DiffieHellmanService.encryptFile(zipFile, secretKey);\n  \n      const formData = new FormData();\n      formData.append(\"file\", zipFile);\n      formData.append(\"receiver\", receiver);\n  \n      const response = await axios.post(`${BASE_URL}/encrypt-files/media`, formData, {\n        headers: {\n          Authorization: `Bearer ${jwt}`,\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n  \n      console.log(\"Encrypted ZIP file uploaded successfully!\");\n      return response.data;\n    } catch (error) {\n      console.error(\"Error uploading encrypted ZIP file:\", error);\n      throw error;\n    }\n  },\n  \n\n  // Retrieve Encrypted File\n  async downloadEncryptedMedia(filename: string, secretKey: string, jwt: string) {\n    try {\n      const response = await axios.get(`${BASE_URL}/encrypt-files/media?filename=${filename}`, {\n        headers: {\n          Authorization: `Bearer ${jwt}`,\n        },\n        responseType: \"blob\",\n      });\n  \n      const encryptedBlob = new Blob([response.data]);\n      const encryptedFile = new File([encryptedBlob], filename);\n  \n      // const decryptedZipBlob = await DiffieHellmanService.decryptFile(encryptedFile, String(secretKey));\n  \n      const zip = new JSZip();\n      const unzippedFiles = await zip.loadAsync(encryptedFile);\n  \n      const decryptedImages: File[] = [];\n      for (const fileName of Object.keys(unzippedFiles.files)) {\n        const fileData = await unzippedFiles.files[fileName].async('blob');\n        \n        const file = new File([fileData], fileName, { type: 'image/*' });\n        decryptedImages.push(file);\n      }\n      \n      console.log(\"Encrypted media downloaded, decrypted, and extracted successfully!\");\n      return decryptedImages; // Return the array of decrypted images\n    } catch (error) {\n      console.error(\"Error downloading, decrypting, or processing media:\", error);\n      throw error;\n    }\n  }\n  \n};\n\nfunction saveFileToClient(file: File): void {\n  const url = URL.createObjectURL(file);\n\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = file.name;\n\n  document.body.appendChild(link);\n\n  link.click();\n\n  URL.revokeObjectURL(url);\n  document.body.removeChild(link);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}