{"ast":null,"code":"import * as CryptoJS from 'crypto-js';\nconst P = BigInt(23);\nconst g = BigInt(2);\nexport const DiffieHellmanService = {\n  generateSecret() {\n    const randomKey = BigInt(Math.floor(Math.random() * Number(P - g) + 1));\n    return randomKey;\n  },\n  modularExponentiation(base, exponent, modulus) {\n    if (modulus === BigInt(1)) return BigInt(0);\n    let result = BigInt(1);\n    base = base % modulus;\n    while (exponent > 0) {\n      if (exponent % BigInt(2) === BigInt(1)) {\n        result = result * base % modulus;\n      }\n      exponent = exponent >> BigInt(1);\n      base = base * base % modulus;\n    }\n    return result;\n  },\n  generatePublicKey(secret) {\n    const pubKey = this.modularExponentiation(g, secret, P);\n    return pubKey;\n  },\n  generateSharedSecret(otherPartyPublicKey, ownPrivateKey) {\n    if (!otherPartyPublicKey || !ownPrivateKey) return null;\n    return this.modularExponentiation(BigInt(otherPartyPublicKey), BigInt(ownPrivateKey), P);\n  },\n  handleGenerateKeys() {\n    var secret = this.generateSecret();\n    const publicKey = String(this.generatePublicKey(secret));\n    console.log(\"Private Key (Secret):\", secret.toString());\n    console.log(\"Public Key:\", publicKey.toString());\n    return {\n      secret,\n      publicKey\n    };\n  },\n  encrypt(plainText, secretKey) {\n    const cipherText = CryptoJS.AES.encrypt(plainText, secretKey).toString();\n    return cipherText;\n  },\n  decrypt(cipherText, secretKey) {\n    const bytes = CryptoJS.AES.decrypt(cipherText, secretKey);\n    const plainText = bytes.toString(CryptoJS.enc.Utf8);\n    return plainText;\n  },\n  decryptMessages(messages, secretKey) {\n    const decryptedMessages = messages.map(msg => {\n      msg.content = this.decrypt(msg.content, secretKey);\n      return msg;\n    });\n    return decryptedMessages;\n  }\n};\nexport default DiffieHellmanService;","map":{"version":3,"names":["CryptoJS","P","BigInt","g","DiffieHellmanService","generateSecret","randomKey","Math","floor","random","Number","modularExponentiation","base","exponent","modulus","result","generatePublicKey","secret","pubKey","generateSharedSecret","otherPartyPublicKey","ownPrivateKey","handleGenerateKeys","publicKey","String","console","log","toString","encrypt","plainText","secretKey","cipherText","AES","decrypt","bytes","enc","Utf8","decryptMessages","messages","decryptedMessages","map","msg","content"],"sources":["/home/n/Desktop/privchat10.11.2024/privchatFrontend/src/api/DiffieHellmanService.ts"],"sourcesContent":["import * as CryptoJS from 'crypto-js'\nimport { Message } from '../types';\n\n\nconst P = BigInt(23)\nconst g = BigInt(2)\n\n\n\nexport const DiffieHellmanService = {\n    generateSecret() {\n        const randomKey = BigInt(Math.floor(Math.random() * Number(P - g) + 1));\n        return randomKey;\n    },\n\n    modularExponentiation(base: bigint, exponent: bigint, modulus: bigint) {\n        if (modulus === BigInt(1)) return BigInt(0);\n        let result = BigInt(1);\n        base = base % modulus;\n        while (exponent > 0) {\n            if (exponent % BigInt(2) === BigInt(1)) {\n                result = (result * base) % modulus;\n            }\n            exponent = exponent >> BigInt(1);\n            base = (base * base) % modulus;\n        }\n        return result;\n    },\n\n    generatePublicKey(secret: bigint) {\n        const pubKey = this.modularExponentiation(g, secret, P);\n        return pubKey;\n    },\n\n    generateSharedSecret(otherPartyPublicKey: string, ownPrivateKey: string) {\n        if (!otherPartyPublicKey || !ownPrivateKey) return null;\n        return this.modularExponentiation(BigInt(otherPartyPublicKey), BigInt(ownPrivateKey), P);\n    },\n\n    handleGenerateKeys() {\n        var secret = this.generateSecret();\n        const publicKey = String(this.generatePublicKey(secret));\n        console.log(\"Private Key (Secret):\", secret.toString());\n        console.log(\"Public Key:\", publicKey.toString());\n        return { secret, publicKey };\n    },\n\n    encrypt(plainText: string, secretKey: string) {\n        const cipherText = CryptoJS.AES.encrypt(plainText, secretKey).toString()\n        return cipherText\n    },\n\n    decrypt(cipherText: string, secretKey: string) {\n        const bytes = CryptoJS.AES.decrypt(cipherText, secretKey)\n        const plainText = bytes.toString(CryptoJS.enc.Utf8)\n        return plainText\n    },\n\n    decryptMessages(messages: Message[], secretKey: string) {\n        const decryptedMessages = messages.map((msg) => {\n            msg.content = this.decrypt(msg.content, secretKey)\n            return msg\n        })\n\n        return decryptedMessages\n    }\n}\n\nexport default DiffieHellmanService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}