{"ast":null,"code":"var _jsxFileName = \"/home/n/Desktop/privchat10.11.2024/privchatFrontend/src/pages/Messenger.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { MessengerService } from '../api/MessengerService';\nimport DiffieHellmanService from '../api/DiffieHellmanService';\nimport { initializeWebSocket, disconnectWebSocket } from '../services/WebSocketService';\nimport { useUser } from '../context/UserContext';\nimport { useMessenger } from '../context/MessengerContext';\nimport { BACKEND_API } from '../config';\nimport Header from '../components/Header';\nimport LeftBar from '../components/LeftBar';\nimport Chat from '../components/Chat';\nimport { getOpponentNickname, getOpponentPublicKey } from '../utils/functions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Messenger = () => {\n  _s();\n  const {\n    user\n  } = useUser();\n  const {\n    chats,\n    setChats,\n    messages,\n    setMessages,\n    currentChat,\n    setCurrentChat,\n    isMobile,\n    showSidebar\n  } = useMessenger();\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n  const chatsRef = useRef([]);\n  useEffect(() => {\n    loadChats();\n  }, [user, refreshTrigger]);\n  useEffect(() => {\n    chatsRef.current = chats;\n  }, [chats]);\n  useEffect(() => {\n    const client = initializeWebSocket(BACKEND_API, handleSocketUpdate, (user === null || user === void 0 ? void 0 : user.nickname) || '');\n    return () => disconnectWebSocket(client);\n  }, [user]);\n  const loadChats = async () => {\n    if (!user) return;\n    const fetchedChats = await MessengerService.getChats(user.publicKey, user.jwt);\n    if (!fetchedChats) return;\n    const updatedChats = fetchedChats.map(chat => {\n      const otherPartyKey = getOpponentPublicKey(user, chat);\n      const sharedKey = DiffieHellmanService.generateSharedSecret(otherPartyKey, user.secretKey);\n      return {\n        ...chat,\n        sharedSecretKey: sharedKey || ''\n      };\n    });\n    setChats(updatedChats);\n  };\n  const handleSocketUpdate = wsMessage => {\n    if (wsMessage.message == \"request\") {\n      loadChats();\n      return;\n    }\n    const {\n      sender,\n      content: encryptedContent\n    } = wsMessage.message || {};\n    if (!sender || !encryptedContent) return;\n    const chat = chatsRef.current.find(chat => chat.requesterNickname === sender || chat.requestedNickname === sender);\n    const sharedKey = chat === null || chat === void 0 ? void 0 : chat.sharedSecretKey;\n    if (!sharedKey || !user) return;\n    const decryptedContent = DiffieHellmanService.decrypt(encryptedContent, String(sharedKey));\n    if (!decryptedContent) return;\n    setMessages(prev => [...prev, {\n      content: decryptedContent,\n      sender,\n      receiver: user.nickname,\n      createdAt: new Date()\n    }]);\n  };\n  const handleChatSelect = chat => {\n    setCurrentChat({\n      ...chat\n    });\n  };\n  function renderLeftBar() {\n    if (!isMobile) {\n      return /*#__PURE__*/_jsxDEV(LeftBar, {\n        onChatSelect: handleChatSelect,\n        trigger: refreshTrigger\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 14\n      }, this);\n    } else if (showSidebar) {}\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      userNickname: user === null || user === void 0 ? void 0 : user.nickname,\n      chatNickname: currentChat ? getOpponentNickname(user, currentChat) : 'No chat selected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flex: 1\n      },\n      children: currentChat ? /*#__PURE__*/_jsxDEV(Chat, {\n        trigger: refreshTrigger\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Select a chat to start messaging\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 60\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(Messenger, \"BMXqsbDGsZVnzxbIfpVL1Cim5Ns=\", false, function () {\n  return [useUser, useMessenger];\n});\n_c = Messenger;\nexport default Messenger;\n{/* <div style={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>\n <Header\n  userNickname={user?.nickname}\n  chatNickname={currentChat ? getOpponentNickname(user, currentChat) : 'No chat selected'}\n />\n <div style={{ display: 'flex', flex: 1 }}>\n  <LeftBar onChatSelect={handleChatSelect} trigger={refreshTrigger} />\n  {currentChat ? <Chat trigger={refreshTrigger} /> : <div>Select a chat to start messaging</div>}\n </div>\n <button onClick={() => setRefreshTrigger(refreshTrigger + 1)}>Refresh</button>\n </div> */}\nvar _c;\n$RefreshReg$(_c, \"Messenger\");","map":{"version":3,"names":["React","useEffect","useRef","useState","MessengerService","DiffieHellmanService","initializeWebSocket","disconnectWebSocket","useUser","useMessenger","BACKEND_API","Header","LeftBar","Chat","getOpponentNickname","getOpponentPublicKey","jsxDEV","_jsxDEV","Messenger","_s","user","chats","setChats","messages","setMessages","currentChat","setCurrentChat","isMobile","showSidebar","refreshTrigger","setRefreshTrigger","chatsRef","loadChats","current","client","handleSocketUpdate","nickname","fetchedChats","getChats","publicKey","jwt","updatedChats","map","chat","otherPartyKey","sharedKey","generateSharedSecret","secretKey","sharedSecretKey","wsMessage","message","sender","content","encryptedContent","find","requesterNickname","requestedNickname","decryptedContent","decrypt","String","prev","receiver","createdAt","Date","handleChatSelect","renderLeftBar","onChatSelect","trigger","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexDirection","height","children","userNickname","chatNickname","flex","_c","$RefreshReg$"],"sources":["/home/n/Desktop/privchat10.11.2024/privchatFrontend/src/pages/Messenger.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { MessengerService } from '../api/MessengerService';\nimport DiffieHellmanService from '../api/DiffieHellmanService';\nimport { initializeWebSocket, disconnectWebSocket } from '../services/WebSocketService';\n\nimport { useUser } from '../context/UserContext';\nimport { useMessenger } from '../context/MessengerContext';\nimport { ChatInterface } from '../types';\nimport { BACKEND_API } from '../config';\n\nimport Header from '../components/Header';\nimport LeftBar from '../components/LeftBar';\nimport Chat from '../components/Chat';\nimport { getOpponentNickname, getOpponentPublicKey } from '../utils/functions';\n\n\nconst Messenger: React.FC = () => {\n  const { user } = useUser();\n  const { chats, setChats, messages, setMessages, currentChat, setCurrentChat, isMobile, showSidebar } = useMessenger();\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n  const chatsRef = useRef<ChatInterface[]>([]);\n\n\n  useEffect(() => {\n    loadChats();\n  }, [user, refreshTrigger]);\n\n  useEffect(() => {\n    chatsRef.current = chats;\n  }, [chats]);\n\n  useEffect(() => {\n    const client = initializeWebSocket(\n      BACKEND_API,\n      handleSocketUpdate,\n      user?.nickname || ''\n    );\n\n    return () => disconnectWebSocket(client);\n  }, [user]);\n\n  const loadChats = async () => {\n    if (!user) return;\n    const fetchedChats = await MessengerService.getChats(user.publicKey, user.jwt);\n    if (!fetchedChats) return\n    const updatedChats = fetchedChats.map((chat: ChatInterface) => {\n      const otherPartyKey = getOpponentPublicKey(user, chat);\n      const sharedKey = DiffieHellmanService.generateSharedSecret(otherPartyKey, user.secretKey);\n      return { ...chat, sharedSecretKey: sharedKey || '' };\n    });\n    setChats(updatedChats);\n  };\n\n  const handleSocketUpdate = (wsMessage: any) => {\n    if (wsMessage.message == \"request\") {\n      loadChats();\n      return\n    }\n    const { sender, content: encryptedContent } = wsMessage.message || {};\n    if (!sender || !encryptedContent) return;\n\n    const chat = chatsRef.current.find(\n      (chat) => chat.requesterNickname === sender || chat.requestedNickname === sender\n    );\n\n    const sharedKey = chat?.sharedSecretKey;\n    if (!sharedKey || !user) return;  \n\n    const decryptedContent =  DiffieHellmanService.decrypt(encryptedContent, String(sharedKey));\n    if (!decryptedContent) return;\n\n    setMessages((prev) => [\n      ...prev,\n      {\n        content: decryptedContent,\n        sender,\n        receiver: user.nickname,\n        createdAt: new Date(),\n      },\n    ]);\n  };\n\n  const handleChatSelect = (chat: ChatInterface) => {\n    setCurrentChat({ ...chat });\n  };\n\n  function renderLeftBar() {\n    if (!isMobile) {\n      return <LeftBar onChatSelect={handleChatSelect} trigger={refreshTrigger} />\n    }\n    else if (showSidebar) {\n      \n    }\n\n  }\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>\n      <Header\n        userNickname={user?.nickname}\n        chatNickname={currentChat ? getOpponentNickname(user, currentChat) : 'No chat selected'}\n      />\n      <div style={{ display: 'flex', flex: 1 }}>\n        {currentChat ? <Chat trigger={refreshTrigger} /> : <div>Select a chat to start messaging</div>}\n      </div>\n      {/* <button onClick={() => setRefreshTrigger(refreshTrigger + 1)}>Refresh</button> */}\n    </div>\n  );\n};\n\nexport default Messenger;\n{/* <div style={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>\n<Header\n  userNickname={user?.nickname}\n  chatNickname={currentChat ? getOpponentNickname(user, currentChat) : 'No chat selected'}\n/>\n<div style={{ display: 'flex', flex: 1 }}>\n  <LeftBar onChatSelect={handleChatSelect} trigger={refreshTrigger} />\n  {currentChat ? <Chat trigger={refreshTrigger} /> : <div>Select a chat to start messaging</div>}\n</div>\n<button onClick={() => setRefreshTrigger(refreshTrigger + 1)}>Refresh</button>\n</div> */}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}